/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-03-31")
public class NodeSet implements org.apache.thrift.TBase<NodeSet, NodeSet._Fields>, java.io.Serializable, Cloneable, Comparable<NodeSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeSet");

  private static final org.apache.thrift.protocol.TField PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("pred", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CURR_FIELD_DESC = new org.apache.thrift.protocol.TField("curr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SUCC_FIELD_DESC = new org.apache.thrift.protocol.TField("succ", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodeSetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodeSetTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable NodeInfo pred; // required
  public @org.apache.thrift.annotation.Nullable NodeInfo curr; // required
  public @org.apache.thrift.annotation.Nullable NodeInfo succ; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRED((short)1, "pred"),
    CURR((short)2, "curr"),
    SUCC((short)3, "succ");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRED
          return PRED;
        case 2: // CURR
          return CURR;
        case 3: // SUCC
          return SUCC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRED, new org.apache.thrift.meta_data.FieldMetaData("pred", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    tmpMap.put(_Fields.CURR, new org.apache.thrift.meta_data.FieldMetaData("curr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    tmpMap.put(_Fields.SUCC, new org.apache.thrift.meta_data.FieldMetaData("succ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeSet.class, metaDataMap);
  }

  public NodeSet() {
  }

  public NodeSet(
    NodeInfo pred,
    NodeInfo curr,
    NodeInfo succ)
  {
    this();
    this.pred = pred;
    this.curr = curr;
    this.succ = succ;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeSet(NodeSet other) {
    if (other.isSetPred()) {
      this.pred = new NodeInfo(other.pred);
    }
    if (other.isSetCurr()) {
      this.curr = new NodeInfo(other.curr);
    }
    if (other.isSetSucc()) {
      this.succ = new NodeInfo(other.succ);
    }
  }

  public NodeSet deepCopy() {
    return new NodeSet(this);
  }

  @Override
  public void clear() {
    this.pred = null;
    this.curr = null;
    this.succ = null;
  }

  @org.apache.thrift.annotation.Nullable
  public NodeInfo getPred() {
    return this.pred;
  }

  public NodeSet setPred(@org.apache.thrift.annotation.Nullable NodeInfo pred) {
    this.pred = pred;
    return this;
  }

  public void unsetPred() {
    this.pred = null;
  }

  /** Returns true if field pred is set (has been assigned a value) and false otherwise */
  public boolean isSetPred() {
    return this.pred != null;
  }

  public void setPredIsSet(boolean value) {
    if (!value) {
      this.pred = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public NodeInfo getCurr() {
    return this.curr;
  }

  public NodeSet setCurr(@org.apache.thrift.annotation.Nullable NodeInfo curr) {
    this.curr = curr;
    return this;
  }

  public void unsetCurr() {
    this.curr = null;
  }

  /** Returns true if field curr is set (has been assigned a value) and false otherwise */
  public boolean isSetCurr() {
    return this.curr != null;
  }

  public void setCurrIsSet(boolean value) {
    if (!value) {
      this.curr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public NodeInfo getSucc() {
    return this.succ;
  }

  public NodeSet setSucc(@org.apache.thrift.annotation.Nullable NodeInfo succ) {
    this.succ = succ;
    return this;
  }

  public void unsetSucc() {
    this.succ = null;
  }

  /** Returns true if field succ is set (has been assigned a value) and false otherwise */
  public boolean isSetSucc() {
    return this.succ != null;
  }

  public void setSuccIsSet(boolean value) {
    if (!value) {
      this.succ = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PRED:
      if (value == null) {
        unsetPred();
      } else {
        setPred((NodeInfo)value);
      }
      break;

    case CURR:
      if (value == null) {
        unsetCurr();
      } else {
        setCurr((NodeInfo)value);
      }
      break;

    case SUCC:
      if (value == null) {
        unsetSucc();
      } else {
        setSucc((NodeInfo)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PRED:
      return getPred();

    case CURR:
      return getCurr();

    case SUCC:
      return getSucc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PRED:
      return isSetPred();
    case CURR:
      return isSetCurr();
    case SUCC:
      return isSetSucc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeSet)
      return this.equals((NodeSet)that);
    return false;
  }

  public boolean equals(NodeSet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pred = true && this.isSetPred();
    boolean that_present_pred = true && that.isSetPred();
    if (this_present_pred || that_present_pred) {
      if (!(this_present_pred && that_present_pred))
        return false;
      if (!this.pred.equals(that.pred))
        return false;
    }

    boolean this_present_curr = true && this.isSetCurr();
    boolean that_present_curr = true && that.isSetCurr();
    if (this_present_curr || that_present_curr) {
      if (!(this_present_curr && that_present_curr))
        return false;
      if (!this.curr.equals(that.curr))
        return false;
    }

    boolean this_present_succ = true && this.isSetSucc();
    boolean that_present_succ = true && that.isSetSucc();
    if (this_present_succ || that_present_succ) {
      if (!(this_present_succ && that_present_succ))
        return false;
      if (!this.succ.equals(that.succ))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPred()) ? 131071 : 524287);
    if (isSetPred())
      hashCode = hashCode * 8191 + pred.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurr()) ? 131071 : 524287);
    if (isSetCurr())
      hashCode = hashCode * 8191 + curr.hashCode();

    hashCode = hashCode * 8191 + ((isSetSucc()) ? 131071 : 524287);
    if (isSetSucc())
      hashCode = hashCode * 8191 + succ.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NodeSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPred()).compareTo(other.isSetPred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pred, other.pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurr()).compareTo(other.isSetCurr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curr, other.curr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSucc()).compareTo(other.isSetSucc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.succ, other.succ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NodeSet(");
    boolean first = true;

    sb.append("pred:");
    if (this.pred == null) {
      sb.append("null");
    } else {
      sb.append(this.pred);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curr:");
    if (this.curr == null) {
      sb.append("null");
    } else {
      sb.append(this.curr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("succ:");
    if (this.succ == null) {
      sb.append("null");
    } else {
      sb.append(this.succ);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pred != null) {
      pred.validate();
    }
    if (curr != null) {
      curr.validate();
    }
    if (succ != null) {
      succ.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeSetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeSetStandardScheme getScheme() {
      return new NodeSetStandardScheme();
    }
  }

  private static class NodeSetStandardScheme extends org.apache.thrift.scheme.StandardScheme<NodeSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pred = new NodeInfo();
              struct.pred.read(iprot);
              struct.setPredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.curr = new NodeInfo();
              struct.curr.read(iprot);
              struct.setCurrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUCC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.succ = new NodeInfo();
              struct.succ.read(iprot);
              struct.setSuccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pred != null) {
        oprot.writeFieldBegin(PRED_FIELD_DESC);
        struct.pred.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.curr != null) {
        oprot.writeFieldBegin(CURR_FIELD_DESC);
        struct.curr.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.succ != null) {
        oprot.writeFieldBegin(SUCC_FIELD_DESC);
        struct.succ.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeSetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeSetTupleScheme getScheme() {
      return new NodeSetTupleScheme();
    }
  }

  private static class NodeSetTupleScheme extends org.apache.thrift.scheme.TupleScheme<NodeSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPred()) {
        optionals.set(0);
      }
      if (struct.isSetCurr()) {
        optionals.set(1);
      }
      if (struct.isSetSucc()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPred()) {
        struct.pred.write(oprot);
      }
      if (struct.isSetCurr()) {
        struct.curr.write(oprot);
      }
      if (struct.isSetSucc()) {
        struct.succ.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pred = new NodeInfo();
        struct.pred.read(iprot);
        struct.setPredIsSet(true);
      }
      if (incoming.get(1)) {
        struct.curr = new NodeInfo();
        struct.curr.read(iprot);
        struct.setCurrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.succ = new NodeInfo();
        struct.succ.read(iprot);
        struct.setSuccIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

